# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import cv2, os, PyQt5, traceback
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QLabel, QMessageBox, QFileDialog
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtCore import Qt, QTimer
from ultralytics import YOLO

dirname = os.path.dirname(PyQt5.__file__)
qt_dir = os.path.join(dirname, 'Qt5', 'plugins', 'platforms')
os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = qt_dir


class Ui_MainWindow(object):
    model = None
    filePath = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.controlPanel = QtWidgets.QWidget(self.centralwidget)
        self.controlPanel.setMinimumSize(QtCore.QSize(250, 0))
        self.controlPanel.setObjectName("controlPanel")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.controlPanel)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.controlPanel)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.modelCombo = QtWidgets.QComboBox(self.controlPanel)
        self.modelCombo.setObjectName("modelCombo")
        self.modelCombo.addItem("")
        self.modelCombo.addItem("")
        self.modelCombo.addItem("")
        self.modelCombo.addItem("")
        self.modelCombo.addItem("")
        self.verticalLayout.addWidget(self.modelCombo)
        self.loadModelBtn = QtWidgets.QPushButton(self.controlPanel)
        self.loadModelBtn.setObjectName("loadModelBtn")
        self.verticalLayout.addWidget(self.loadModelBtn)
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.label_2 = QtWidgets.QLabel(self.controlPanel)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.inputCombo = QtWidgets.QComboBox(self.controlPanel)
        self.inputCombo.setObjectName("inputCombo")
        self.inputCombo.addItem("")
        self.inputCombo.addItem("")
        self.inputCombo.addItem("")
        self.verticalLayout.addWidget(self.inputCombo)
        self.fileBtn = QtWidgets.QPushButton(self.controlPanel)
        self.fileBtn.setEnabled(False)
        self.fileBtn.setObjectName("fileBtn")
        self.verticalLayout.addWidget(self.fileBtn)
        spacerItem1 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem1)
        self.label_3 = QtWidgets.QLabel(self.controlPanel)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.confSlider = QtWidgets.QSlider(self.controlPanel)
        self.confSlider.setOrientation(QtCore.Qt.Horizontal)
        self.confSlider.setMinimum(1)
        self.confSlider.setMaximum(99)
        self.confSlider.setProperty("value", 50)
        self.confSlider.setObjectName("confSlider")
        self.verticalLayout.addWidget(self.confSlider)
        self.confSpin = QtWidgets.QSpinBox(self.controlPanel)
        self.confSpin.setMinimum(1)
        self.confSpin.setMaximum(99)
        self.confSpin.setProperty("value", 50)
        self.confSpin.setObjectName("confSpin")
        self.verticalLayout.addWidget(self.confSpin)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem2)
        self.detectBtn = QtWidgets.QPushButton(self.controlPanel)
        self.detectBtn.setEnabled(False)
        self.detectBtn.setObjectName("detectBtn")
        self.verticalLayout.addWidget(self.detectBtn)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem3)
        self.horizontalLayout.addWidget(self.controlPanel)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.videoTab = QtWidgets.QWidget()
        self.videoTab.setObjectName("videoTab")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.videoTab)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.videoLabel = QtWidgets.QLabel(self.videoTab)
        self.videoLabel.setStyleSheet("background-color: black;")
        self.videoLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.videoLabel.setObjectName("videoLabel")
        self.verticalLayout_2.addWidget(self.videoLabel)
        self.tabWidget.addTab(self.videoTab, "")
        self.metricsTab = QtWidgets.QWidget()
        self.metricsTab.setObjectName("metricsTab")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.metricsTab)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.metricsLabel = QtWidgets.QLabel(self.metricsTab)
        self.metricsLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.metricsLabel.setObjectName("metricsLabel")
        self.verticalLayout_3.addWidget(self.metricsLabel)
        self.tabWidget.addTab(self.metricsTab, "")
        self.horizontalLayout.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        #链接按钮信号
        self.loadModelBtn.clicked.connect(self.load_model)
        self.fileBtn.clicked.connect(self.select_file)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "YOLOv8 目标检测系统"))
        self.label.setText(_translate("MainWindow", "<b>模型选择</b>"))
        self.modelCombo.setItemText(0, _translate("MainWindow", "yolov8n"))
        self.modelCombo.setItemText(1, _translate("MainWindow", "yolov8s"))
        self.modelCombo.setItemText(2, _translate("MainWindow", "yolov8m"))
        self.modelCombo.setItemText(3, _translate("MainWindow", "yolov8l"))
        self.modelCombo.setItemText(4, _translate("MainWindow", "yolov8x"))
        self.loadModelBtn.setText(_translate("MainWindow", "加载模型"))
        self.label_2.setText(_translate("MainWindow", "<b>输入源</b>"))
        self.inputCombo.setItemText(0, _translate("MainWindow", "摄像头"))
        self.inputCombo.setItemText(1, _translate("MainWindow", "图片"))
        self.inputCombo.setItemText(2, _translate("MainWindow", "视频"))
        self.fileBtn.setText(_translate("MainWindow", "选择文件"))
        self.label_3.setText(_translate("MainWindow", "<b>置信度阈值 (%)</b>"))
        self.detectBtn.setText(_translate("MainWindow", "开始检测"))
        self.videoLabel.setText(_translate("MainWindow", "等待视频输入..."))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.videoTab), _translate("MainWindow", "实时检测"))
        self.metricsLabel.setText(_translate("MainWindow", "训练指标将在此显示..."))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.metricsTab), _translate("MainWindow", "性能指标"))

    def load_model(self):
        """加载YOLO模型"""
        try:
            model_name = self.modelCombo.currentText() + ".pt"
            self.model = YOLO(model_name)
            self.statusbar.showMessage(f"模型加载成功: {model_name}")
            self.detectBtn.setEnabled(True)
            self.fileBtn.setEnabled(True)
        except Exception as e:
            self.statusbar.showMessage(f"错误: {str(e)}")
            self.model = None
            self.detectBtn.setEnabled(False)

    def select_file(self):
        try:
            options = QFileDialog.Options()
            input_type = self.inputCombo.currentText()

            if input_type == "图片":
                file, _ = QFileDialog.getOpenFileName(
                    self, "选择图片", "",
                    "图片文件 (*.jpg *.jpeg *.png *.bmp);;所有文件 (*)",
                    options=options
                )
                if file:
                    if not os.path.exists(file):
                        QMessageBox.warning(self, "警告", "文件不存在！")
                        return

                    frame = cv2.imread(file)
                    if frame is None:
                        QMessageBox.critical(self, "错误", "无法读取图片文件！")
                    else:
                        self.file_path = file
                        self.display_image(frame)
                        self.statusbar.showMessage(f"已加载图片: {os.path.basename(file)}")

            elif input_type == "视频":
                file, _ = QFileDialog.getOpenFileName(
                    self, "选择视频", "",
                    "视频文件 (*.mp4 *.avi *.mov *.mkv);;所有文件 (*)",
                    options=options
                )
                if file:
                    self.filePath = file
                    self.statusbar.showMessage(f"已选择视频: {os.path.basename(file)}")

        except Exception as e:
            QMessageBox.critical(self, "致命错误", f"文件选择失败: {str(e)}")
            print(f"DEBUG: 错误详情 - {traceback.format_exc()}")  # 打印完整错误栈
    def display_image(self, cv_img):
        """显示OpenCV图像"""
        try:
            rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
            h, w, ch = rgb_image.shape
            bytes_per_line = ch * w
            qt_image = QImage(rgb_image.data, w, h, bytes_per_line, QImage.Format_RGB888)
            self.videoLabel.setPixmap(QPixmap.fromImage(qt_image).scaled(
                self.videoLabel.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))
        except Exception as e:
            self.statusbar.showMessage(f"显示错误: {str(e)}")
